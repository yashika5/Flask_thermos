import os
#from datetime import datetime

from flask import Flask, render_template, url_for, request, redirect, flash
from flask_sqlalchemy import SQLAlchemy

#from logging import DEBUG
basedir = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__)
#app.logger.setLevel(DEBUG)
app.config['SECRET_KEY'] = '\xf7g\xd7`\x08f\xc1\xeer\x00)\xa0#r\xad\x07\xb0\xc9:\xc6\xccZ\xa1>'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'thermos.db')
db = SQLAlchemy(app)

from forms import BookmarkForm
import models
#bookmarks = []

#def new_bookmarks(num):
#	return []

#def store_bookmark(url, description):
#	bookmarks.append(dict(
#		url = url,
#		description = description,
#		user = "yashika",
#		date = datetime.utcnow()
#		))

#def new_bookmarks(num):
#	return sorted(bookmarks, key=lambda bm: bm['date'], reverse=True)[:num]

#class User:
#	def __init__(self, firstname, lastname):
#		self.firstname = firstname
#		self.lastname = lastname

#	def initials(self):
#		return "{}. {}.".format(self.firstname[0], self.lastname[0])

#	def __str__(self):
#		return str(self.firstname) + " " + str(self.lastname)

def logged_in_user():
	return models.User.query.filter_by(username='yashika').first()

@app.route('/')
@app.route('/index')
def index():
	return render_template('index.html', new_bookmarks=models.Bookmark.newest(5))
		#, title="Title passed from view to template", user=User("Yashika", "N")
		

@app.route('/add', methods=['GET', 'POST'])
def add():
	form = BookmarkForm()
	if form.validate_on_submit():
		url = form.url.data
		description = form.description.data
		bm = models.Bookmark(user=logged_in_user(), url=url, description=description)
		db.session.add(bm)
		db.session.commit()
	#	store_bookmark(url, description)
	#if request.method == "POST":
	#	url = request.form['url']
	#	store_bookmark(url)
		flash("Stored '{}'".format(description))
		#app.logger.debug('stored url: ' + url)
		return redirect(url_for('index'))
	return render_template('add.html', form=form)

@app.errorhandler(404)
def page_not_found(e):
	return render_template('404.html'), 404

@app.errorhandler(500)
def server_error(e):
	return render_template('500.html'), 500


